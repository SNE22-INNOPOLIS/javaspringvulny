name:  SNE_THESIS_WORKFLOW

on:
  push:
    branches:
      - dev

jobs:

  build:
    runs-on: [self-hosted, runner]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Gradle build
        run: ./gradlew :build

  run_sast_scan:
    runs-on: [self-hosted, runner]
    needs: build
    steps:
      - name: Install Snyk CLI
        run: |
          wget https://static.snyk.io/cli/latest/snyk-linux
          chmod +x snyk-linux
          sudo mv -f snyk-linux /usr/local/bin/
          echo "synk package successfully installed..."
      - name: Run Snyk scan
        shell: bash
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
          SNYK_ORG: ${{ secrets.SNYK_ORG }}
        run: |
          sudo snyk-linux auth 292c9ef6-7c83-408c-b63d-0c608cea0e97
          sudo touch test.file
          echo "directory is writable.."
          sudo snyk-linux code test --org=78b2f53f-b8ed-4a42-940f-60f8f8f18274 --project-name=SNE22-INNOPOLIS/javaspringvulny --project-name=SNE22-INNOPOLIS/DVNA --json-file-output=sast.json
        continue-on-error: true
      - name: Upload scan output file
        uses: actions/upload-artifact@v4
        with:
          name: output-log-file
          path: sast.json

  deploy_to_test_env:
    runs-on: [self-hosted, test_env]
    needs: run_sast_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # - name: Install docker
      #   run: |
      #     sudo chmod +x installdocker.sh 
      #     bash installdocker.sh

      # - name: Set up JDK 11
      #   uses: actions/setup-java@v4
      #   with:
      #     java-version: '11'

      # - name: Build with Maven
      #   run: mvn clean package

      # - name: Log in to Docker Hub
      #   run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # - name: Build Docker image
      #   run: sudo docker build . -t ${{ secrets.DOCKER_HUB_USERNAME }}/vuln-java-app:${{ github.sha }}

      # - name: Push Docker image to Docker Hub
      #   run: sudo docker push ${{ secrets.DOCKER_HUB_USERNAME }}/vuln-java-app:${{ github.sha }}
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          KEY: ${{ secrets.EC2_KEY }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/vuln-java-app:${{ github.sha }}
        run: |
          sudo docker stop vuln-java-app || true
          sudo docker rm vuln-java-app || true
          sudo docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/vuln-java-app:1.1 || true
          sudo docker image pull ${{ secrets.DOCKER_HUB_USERNAME }}/vuln-java-app:1.1
          sudo docker run -d --name vuln-java-app -p 9000:9000 ${{ secrets.DOCKER_HUB_USERNAME }}/vuln-java-app:1.1

  run_dast_scan:
    runs-on: [self-hosted, test_env]
    needs: deploy_to_test_env
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: RUN OWASP ZAP
        run: |
          sudo docker pull zaproxy/zap-stable
          sudo docker run -t zaproxy/zap-stable zap-baseline.py -t https://${{ secrets.EC2_HOST }}:9000 | jq -R -s '.' > dast.json
        continue-on-error: true
      - name: Upload scan output file
        uses: actions/upload-artifact@v4
        with:
          name: dast-log-file
          path: /home/${{ secrets.EC2_USER }}/dast.json 

  analyze_scan_results_with_GPT-4:
    runs-on: [self-hosted, test_env]
    needs: run_dast_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download sast results
        uses: actions/download-artifact@v4
        with:
          name: output-log-file
      - name: Download dast results
        uses: actions/download-artifact@v4
        with:
          name: dast-log-file

      - name: Analyze Results with GPT-4
        env:
          SLACK_WEBHOOKS: ${{ secrets.SLACK_WEBHOOKS }}
          OPENAI_API_TOKEN: ${{ secrets.OPENAI_API_TOKEN }}
        run: |
          sudo apt-get update && sudo apt-get install -y python3
          python3 genAI_analysis_to_slack.py
          
